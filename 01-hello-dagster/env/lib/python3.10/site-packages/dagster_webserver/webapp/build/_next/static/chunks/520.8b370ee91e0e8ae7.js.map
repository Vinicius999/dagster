{"version":3,"file":"static/chunks/520.8b370ee91e0e8ae7.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/assets/AssetGroupSuggest.tsx","webpack://_N_E/../ui-core/src/assets/AssetLink.tsx","webpack://_N_E/../ui-core/src/assets/AssetTableFragment.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedAssetTable.tsx","webpack://_N_E/../ui-core/src/assets/AssetWipeDialog.tsx","webpack://_N_E/../ui-core/src/assets/AssetTable.tsx","webpack://_N_E/../ui-core/src/assets/AssetsEmptyState.tsx","webpack://_N_E/../ui-core/src/assets/useAssetView.tsx","webpack://_N_E/../ui-core/src/assets/AssetsCatalogTable.tsx","webpack://_N_E/../ui-core/src/assets/useAssetSearch.tsx","webpack://_N_E/../ui-core/src/nav/RepositoryLink.tsx","webpack://_N_E/../ui-core/src/nav/ScheduleOrSensorTag.tsx","webpack://_N_E/../ui-core/src/runs/useCursorPaginatedQuery.tsx","webpack://_N_E/../ui-core/src/assets/AssetActionMenu.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedAssetRow.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {Box, Checkbox, Icon, MenuItem, Suggest} from '@dagster-io/ui-components';\nimport isEqual from 'lodash/isEqual';\nimport uniqBy from 'lodash/uniqBy';\nimport * as React from 'react';\n\nimport {AssetGroupSelector} from '../graphql/types';\nimport {ClearButton} from '../ui/ClearButton';\nimport {buildRepoPathForHuman} from '../workspace/buildRepoAddress';\n\ntype Asset = {\n  definition: {\n    groupName: string | null;\n    repository: {name: string; location: {name: string}};\n  } | null;\n};\n\nexport function useAssetGroupSelectorsForAssets(assets: Asset[] | undefined) {\n  return React.useMemo(\n    () =>\n      uniqBy(\n        (assets || []).map(buildAssetGroupSelector).filter((a) => !!a) as AssetGroupSelector[],\n        (a) => JSON.stringify(a),\n      ).sort((a, b) => a.groupName.localeCompare(b.groupName)),\n    [assets],\n  );\n}\n\n// We're using a <Suggest /> component because it's convenient to have typeahead behavior,\n// but we want to support mulit-selection. To achieve this, we show checkboxes on the items\n// and override the label text (\"2 groups\"). Blueprint doesn't need to know what the real\n// selection is, just that one exists.\nconst FAKE_SELECTED_ITEM: AssetGroupSelector = {\n  groupName: '-',\n  repositoryLocationName: '-',\n  repositoryName: '-',\n};\n\nexport const AssetGroupSuggest: React.FC<{\n  assetGroups: AssetGroupSelector[];\n  value: AssetGroupSelector[];\n  onChange: (g: AssetGroupSelector[]) => void;\n}> = ({assetGroups, value, onChange}) => {\n  const repoKey = (g: AssetGroupSelector) => `${g.repositoryName}@${g.repositoryLocationName}`;\n  const repoKey1 = assetGroups[0] ? repoKey(assetGroups[0]) : '';\n  const repoContextNeeded = !assetGroups.every((g) => repoKey1 === repoKey(g));\n\n  return (\n    <Suggest<AssetGroupSelector>\n      selectedItem={value.length ? FAKE_SELECTED_ITEM : null}\n      items={assetGroups}\n      menuWidth={300}\n      inputProps={{\n        style: {width: 200},\n        placeholder: 'Filter asset groups…',\n        rightElement: value.length ? (\n          <ClearButton onClick={() => onChange([])} style={{marginTop: 5, marginRight: 4}}>\n            <Icon name=\"cancel\" />\n          </ClearButton>\n        ) : undefined,\n      }}\n      inputValueRenderer={() =>\n        value.length === 1 ? value[0]!.groupName : value.length > 1 ? `${value.length} groups` : ``\n      }\n      itemPredicate={(query, partition) =>\n        query.length === 0 || partition.groupName.toLowerCase().includes(query.toLowerCase())\n      }\n      itemsEqual={isEqual}\n      itemRenderer={(assetGroup, props) => (\n        <MenuItem\n          active={props.modifiers.active}\n          onClick={props.handleClick}\n          key={JSON.stringify(assetGroup)}\n          text={\n            <Box\n              flex={{direction: 'row', gap: 6, alignItems: 'center'}}\n              margin={{left: 4}}\n              style={{maxWidth: '500px'}}\n            >\n              <Checkbox checked={value.some((g) => isEqual(g, assetGroup))} size=\"small\" readOnly />\n              <Box\n                flex={{direction: 'row', alignItems: 'center', grow: 1, shrink: 1}}\n                style={{overflow: 'hidden'}}\n              >\n                <div style={{overflow: 'hidden'}}>\n                  {assetGroup.groupName}\n                  {repoContextNeeded ? (\n                    <span style={{opacity: 0.5, paddingLeft: 4}}>\n                      {buildRepoPathForHuman(\n                        assetGroup.repositoryName,\n                        assetGroup.repositoryLocationName,\n                      )}\n                    </span>\n                  ) : undefined}\n                </div>\n              </Box>\n            </Box>\n          }\n        />\n      )}\n      noResults={<MenuItem disabled={true} text=\"No asset groups\" />}\n      closeOnSelect={false}\n      resetOnQuery={false}\n      onItemSelect={(item) => {\n        const nextValue = value.filter((g) => !isEqual(item, g));\n        if (nextValue.length === value.length) {\n          nextValue.push(item);\n        }\n        onChange(nextValue);\n      }}\n    />\n  );\n};\n\nexport function buildAssetGroupSelector(a: Asset) {\n  return a.definition && a.definition.groupName\n    ? {\n        groupName: a.definition.groupName,\n        repositoryName: a.definition.repository.name,\n        repositoryLocationName: a.definition.repository.location.name,\n      }\n    : null;\n}\n","import {Box, Colors, Icon, MiddleTruncate} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\n\nexport const AssetLink: React.FC<{\n  path: string[];\n  icon?: 'asset' | 'asset_non_sda' | 'folder';\n  textStyle?: 'break-word' | 'middle-truncate';\n  url?: string;\n  isGroup?: boolean;\n}> = (props) => {\n  const {path, icon, url, isGroup, textStyle = 'break-word'} = props;\n  const linkUrl = url ? url : assetDetailsPathForKey({path});\n  const assetPath =\n    path\n      .reduce((accum, elem, ii) => [...accum, ii > 0 ? ' / ' : '', elem], [] as string[])\n      .join('') + (isGroup ? '/' : '');\n\n  return (\n    <Box\n      flex={{direction: 'row', alignItems: 'flex-start', display: 'inline-flex'}}\n      style={{maxWidth: '100%'}}\n    >\n      {icon ? (\n        <Box margin={{right: 8, top: 2}}>\n          <Icon name={icon} color={Colors.Gray400} />\n        </Box>\n      ) : null}\n      <Link to={linkUrl} style={{overflow: 'hidden'}}>\n        {textStyle === 'break-word' ? (\n          <span style={{wordBreak: 'break-word'}}>{assetPath}</span>\n        ) : (\n          <MiddleTruncate text={assetPath} />\n        )}\n      </Link>\n    </Box>\n  );\n};\n","import {gql} from '@apollo/client';\n\nexport const ASSET_TABLE_DEFINITION_FRAGMENT = gql`\n  fragment AssetTableDefinitionFragment on AssetNode {\n    id\n    groupName\n    opNames\n    isSource\n    isObservable\n    isExecutable\n    computeKind\n    hasMaterializePermission\n    partitionDefinition {\n      description\n    }\n    description\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const ASSET_TABLE_FRAGMENT = gql`\n  fragment AssetTableFragment on Asset {\n    id\n    key {\n      path\n    }\n    definition {\n      id\n      ...AssetTableDefinitionFragment\n    }\n  }\n\n  ${ASSET_TABLE_DEFINITION_FRAGMENT}\n`;\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {AssetTableFragment} from '../assets/types/AssetTableFragment.types';\nimport {AssetViewType} from '../assets/useAssetView';\nimport {AssetKeyInput} from '../graphql/types';\nimport {Container, Inner} from '../ui/VirtualizedTable';\n\nimport {VirtualizedAssetCatalogHeader, VirtualizedAssetRow} from './VirtualizedAssetRow';\nimport {buildRepoAddress} from './buildRepoAddress';\n\ntype Row =\n  | {type: 'asset'; path: string[]; displayKey: string; asset: AssetTableFragment}\n  | {type: 'folder'; path: string[]; displayKey: string; assets: AssetTableFragment[]};\n\ninterface Props {\n  headerCheckbox: React.ReactNode;\n  prefixPath: string[];\n  groups: {[displayKey: string]: AssetTableFragment[]};\n  checkedDisplayKeys: Set<string>;\n  onToggleFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n  onWipe: (assets: AssetKeyInput[]) => void;\n  showRepoColumn: boolean;\n  view?: AssetViewType;\n}\n\nexport const VirtualizedAssetTable: React.FC<Props> = (props) => {\n  const {\n    headerCheckbox,\n    prefixPath,\n    groups,\n    checkedDisplayKeys,\n    onToggleFactory,\n    onWipe,\n    showRepoColumn,\n    view = 'flat',\n  } = props;\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const count = Object.keys(groups).length;\n\n  const rowVirtualizer = useVirtualizer({\n    count,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 5,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  const rows: Row[] = React.useMemo(() => {\n    return Object.entries(groups).map(([displayKey, assets]) => {\n      const path = [...prefixPath, ...JSON.parse(displayKey)];\n      const isFolder = assets.length > 1 || path.join('/') !== assets[0]!.key.path.join('/');\n      return isFolder\n        ? {type: 'folder', path, displayKey, assets}\n        : {type: 'asset', path, displayKey, asset: assets[0]!};\n    });\n  }, [prefixPath, groups]);\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedAssetCatalogHeader headerCheckbox={headerCheckbox} view={view} />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: Row = rows[index]!;\n            const rowType = () => {\n              if (row.type === 'folder') {\n                return 'folder';\n              }\n              return row.asset.definition ? 'asset' : 'asset_non_sda';\n            };\n\n            const repoAddress = () => {\n              if (row.type === 'folder' || !row.asset.definition) {\n                return null;\n              }\n              const repository = row.asset.definition.repository;\n              return buildRepoAddress(repository.name, repository.location.name);\n            };\n\n            const wipeableAssets = row.type === 'folder' ? row.assets : [row.asset];\n\n            return (\n              <VirtualizedAssetRow\n                key={key}\n                view={view}\n                type={rowType()}\n                path={row.path}\n                definition={row.type === 'asset' ? row.asset.definition : null}\n                repoAddress={repoAddress()}\n                showCheckboxColumn\n                showRepoColumn={showRepoColumn}\n                height={size}\n                start={start}\n                checked={checkedDisplayKeys.has(row.displayKey)}\n                onToggleChecked={onToggleFactory(row.displayKey)}\n                onWipe={() => onWipe(wipeableAssets.map((a) => a.key))}\n              />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {gql, RefetchQueriesFunction, useMutation} from '@apollo/client';\nimport {Button, DialogBody, DialogFooter, Dialog, Group} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\n\nimport {AssetWipeMutation, AssetWipeMutationVariables} from './types/AssetWipeDialog.types';\n\ninterface AssetKey {\n  path: string[];\n}\n\nexport const AssetWipeDialog: React.FC<{\n  assetKeys: AssetKey[];\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: (assetKeys: AssetKey[]) => void;\n  requery?: RefetchQueriesFunction;\n}> = ({assetKeys, isOpen, onClose, onComplete, requery}) => {\n  const [requestWipe] = useMutation<AssetWipeMutation, AssetWipeMutationVariables>(\n    ASSET_WIPE_MUTATION,\n    {\n      variables: {assetKeys: assetKeys.map((key) => ({path: key.path || []}))},\n      refetchQueries: requery,\n    },\n  );\n\n  const wipe = async () => {\n    if (!assetKeys.length) {\n      return;\n    }\n    await requestWipe();\n    onComplete(assetKeys);\n  };\n\n  return (\n    <Dialog isOpen={isOpen} title=\"Wipe materializations\" onClose={onClose} style={{width: 600}}>\n      <DialogBody>\n        <Group direction=\"column\" spacing={16}>\n          <div>Are you sure you want to wipe materializations for these assets?</div>\n          <ul style={{paddingLeft: 32, margin: 0}}>\n            {assetKeys.map((assetKey) => {\n              const name = displayNameForAssetKey(assetKey);\n              return (\n                <li style={{marginBottom: 4}} key={name}>\n                  {name}\n                </li>\n              );\n            })}\n          </ul>\n          <div>\n            Assets defined only by their historical materializations will disappear from the Asset\n            Catalog. Software-defined assets will remain unless their definition is also deleted.\n          </div>\n          <strong>This action cannot be undone.</strong>\n        </Group>\n      </DialogBody>\n      <DialogFooter topBorder>\n        <Button intent=\"none\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button intent=\"danger\" onClick={wipe}>\n          Wipe\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst ASSET_WIPE_MUTATION = gql`\n  mutation AssetWipeMutation($assetKeys: [AssetKeyInput!]!) {\n    wipeAssets(assetKeys: $assetKeys) {\n      ... on AssetWipeSuccess {\n        assetKeys {\n          path\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {RefetchQueriesFunction} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  Icon,\n  MenuItem,\n  Menu,\n  Popover,\n  Tooltip,\n  Checkbox,\n  NonIdealState,\n} from '@dagster-io/ui-components';\nimport groupBy from 'lodash/groupBy';\nimport * as React from 'react';\n\nimport {useUnscopedPermissions} from '../app/Permissions';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {AssetGroupSelector, AssetKeyInput} from '../graphql/types';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {testId} from '../testing/testId';\nimport {VirtualizedAssetTable} from '../workspace/VirtualizedAssetTable';\n\nimport {AssetWipeDialog} from './AssetWipeDialog';\nimport {LaunchAssetExecutionButton} from './LaunchAssetExecutionButton';\nimport {AssetTableFragment} from './types/AssetTableFragment.types';\nimport {AssetViewType} from './useAssetView';\n\ntype Asset = AssetTableFragment;\n\ninterface Props {\n  view: AssetViewType;\n  assets: Asset[];\n  refreshState: QueryRefreshState;\n  actionBarComponents: React.ReactNode;\n  prefixPath: string[];\n  displayPathForAsset: (asset: Asset) => string[];\n  requery?: RefetchQueriesFunction;\n  searchPath: string;\n  searchGroups: AssetGroupSelector[];\n}\n\nexport const AssetTable: React.FC<Props> = ({\n  assets,\n  actionBarComponents,\n  refreshState,\n  prefixPath,\n  displayPathForAsset,\n  requery,\n  searchPath,\n  searchGroups,\n  view,\n}) => {\n  const [toWipe, setToWipe] = React.useState<AssetKeyInput[] | undefined>();\n\n  const groupedByDisplayKey = groupBy(assets, (a) => JSON.stringify(displayPathForAsset(a)));\n  const displayKeys = Object.keys(groupedByDisplayKey).sort();\n\n  const [{checkedIds: checkedDisplayKeys}, {onToggleFactory, onToggleAll}] =\n    useSelectionReducer(displayKeys);\n\n  const checkedAssets: Asset[] = [];\n  displayKeys.forEach((displayKey) => {\n    if (checkedDisplayKeys.has(displayKey)) {\n      checkedAssets.push(...(groupedByDisplayKey[displayKey] || []));\n    }\n  });\n\n  const content = () => {\n    if (!assets.length) {\n      if (searchPath) {\n        return (\n          <Box padding={{top: 64}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching assets\"\n              description={\n                searchGroups.length ? (\n                  <div>\n                    No assets matching <strong>{searchPath}</strong> were found in{' '}\n                    {searchGroups.length === 1 ? (\n                      <strong>{searchGroups[0]?.groupName}</strong>\n                    ) : (\n                      'the selected asset groups'\n                    )}\n                  </div>\n                ) : (\n                  <div>\n                    No assets matching <strong>{searchPath}</strong> were found\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No assets\"\n            description={\n              searchGroups.length ? (\n                <div>\n                  No assets were found in{' '}\n                  {searchGroups.length === 1 ? (\n                    <strong>{searchGroups[0]?.groupName}</strong>\n                  ) : (\n                    'the selected asset groups'\n                  )}\n                </div>\n              ) : (\n                'No assets were found'\n              )\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <VirtualizedAssetTable\n        headerCheckbox={\n          <Checkbox\n            indeterminate={\n              checkedDisplayKeys.size > 0 && checkedDisplayKeys.size !== displayKeys.length\n            }\n            checked={checkedDisplayKeys.size > 0 && checkedDisplayKeys.size === displayKeys.length}\n            onChange={(e) => {\n              if (e.target instanceof HTMLInputElement) {\n                onToggleAll(checkedDisplayKeys.size !== displayKeys.length);\n              }\n            }}\n          />\n        }\n        prefixPath={prefixPath}\n        groups={groupedByDisplayKey}\n        checkedDisplayKeys={checkedDisplayKeys}\n        onToggleFactory={onToggleFactory}\n        showRepoColumn\n        view={view}\n        onWipe={(assetKeys: AssetKeyInput[]) => setToWipe(assetKeys)}\n      />\n    );\n  };\n\n  return (\n    <>\n      <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n        <Box\n          background={Colors.White}\n          flex={{alignItems: 'center', gap: 12}}\n          padding={{vertical: 8, left: 24, right: 12}}\n          style={{position: 'sticky', top: 0, zIndex: 1}}\n        >\n          {actionBarComponents}\n          <div style={{flex: 1}} />\n          <QueryRefreshCountdown refreshState={refreshState} />\n          <Box flex={{alignItems: 'center', gap: 8}}>\n            {checkedAssets.some((c) => !c.definition) ? (\n              <Tooltip content=\"One or more selected assets are not software-defined and cannot be launched directly.\">\n                <Button\n                  intent=\"primary\"\n                  data-testid={testId('materialize-button')}\n                  icon={<Icon name=\"materialization\" />}\n                  disabled\n                >\n                  {checkedAssets.length > 1\n                    ? `Materialize (${checkedAssets.length.toLocaleString()})`\n                    : 'Materialize'}\n                </Button>\n              </Tooltip>\n            ) : (\n              <LaunchAssetExecutionButton\n                scope={{selected: checkedAssets.map((a) => ({...a.definition!, assetKey: a.key}))}}\n              />\n            )}\n            <MoreActionsDropdown\n              selected={checkedAssets}\n              clearSelection={() => onToggleAll(false)}\n            />\n          </Box>\n        </Box>\n        {content()}\n      </Box>\n      <AssetWipeDialog\n        assetKeys={toWipe || []}\n        isOpen={!!toWipe}\n        onClose={() => setToWipe(undefined)}\n        onComplete={() => setToWipe(undefined)}\n        requery={requery}\n      />\n    </>\n  );\n};\n\nconst MoreActionsDropdown: React.FC<{\n  selected: Asset[];\n  clearSelection: () => void;\n  requery?: RefetchQueriesFunction;\n}> = React.memo(({selected, clearSelection, requery}) => {\n  const [showBulkWipeDialog, setShowBulkWipeDialog] = React.useState<boolean>(false);\n  const {\n    permissions: {canWipeAssets},\n  } = useUnscopedPermissions();\n\n  if (!canWipeAssets) {\n    return null;\n  }\n\n  const disabled = selected.length === 0;\n\n  return (\n    <>\n      <Popover\n        position=\"bottom-right\"\n        content={\n          <Menu>\n            <MenuItem\n              text=\"Wipe materializations\"\n              onClick={() => setShowBulkWipeDialog(true)}\n              icon={<Icon name=\"delete\" color={disabled ? Colors.Gray600 : Colors.Red500} />}\n              disabled={disabled}\n              intent=\"danger\"\n            />\n          </Menu>\n        }\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n      <AssetWipeDialog\n        assetKeys={selected.map((asset) => asset.key)}\n        isOpen={showBulkWipeDialog}\n        onClose={() => setShowBulkWipeDialog(false)}\n        onComplete={() => {\n          setShowBulkWipeDialog(false);\n          clearSelection();\n        }}\n        requery={requery}\n      />\n    </>\n  );\n});\n","import {NonIdealState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nexport const AssetsEmptyState = ({prefixPath}: {prefixPath: string[]}) => (\n  <NonIdealState\n    icon=\"asset\"\n    title=\"Assets\"\n    description={\n      <p>\n        {prefixPath && prefixPath.length\n          ? `There are no matching materialized assets with the specified asset key. `\n          : `There are no known materialized assets. `}\n        Any asset keys that have been specified with an <code>AssetMaterialization</code> during a\n        pipeline run will appear here. See the{' '}\n        <a href=\"https://docs.dagster.io/_apidocs/ops#dagster.AssetMaterialization\">\n          AssetMaterialization documentation\n        </a>{' '}\n        for more information.\n      </p>\n    }\n  />\n);\n","import {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst ASSET_VIEW_KEY = 'AssetViewPreference';\n\nexport type AssetViewType = 'flat' | 'directory';\n\nconst validateSavedAssetView = (storedValue: any) =>\n  storedValue === 'flat' || storedValue === 'directory' ? storedValue : 'flat';\n\nexport const useAssetView = () => {\n  return useStateWithStorage<AssetViewType>(ASSET_VIEW_KEY, validateSavedAssetView);\n};\n","import {gql, QueryResult, useQuery} from '@apollo/client';\nimport {Box, TextInput, ButtonGroup} from '@dagster-io/ui-components';\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {AssetGroupSelector} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {LoadingSpinner} from '../ui/Loading';\n\nimport {\n  AssetGroupSuggest,\n  buildAssetGroupSelector,\n  useAssetGroupSelectorsForAssets,\n} from './AssetGroupSuggest';\nimport {AssetTable} from './AssetTable';\nimport {ASSET_TABLE_DEFINITION_FRAGMENT, ASSET_TABLE_FRAGMENT} from './AssetTableFragment';\nimport {AssetsEmptyState} from './AssetsEmptyState';\nimport {AssetTableFragment} from './types/AssetTableFragment.types';\nimport {\n  AssetCatalogTableQuery,\n  AssetCatalogTableQueryVariables,\n  AssetCatalogGroupTableQuery,\n  AssetCatalogGroupTableNodeFragment,\n  AssetCatalogGroupTableQueryVariables,\n} from './types/AssetsCatalogTable.types';\nimport {useAssetSearch} from './useAssetSearch';\nimport {AssetViewType, useAssetView} from './useAssetView';\n\ntype Asset = AssetTableFragment;\n\nfunction useAllAssets(groupSelector?: AssetGroupSelector): {\n  query: QueryResult<AssetCatalogTableQuery, any> | QueryResult<AssetCatalogGroupTableQuery, any>;\n  assets: Asset[] | undefined;\n  error: PythonErrorFragment | undefined;\n} {\n  const assetsQuery = useQuery<AssetCatalogTableQuery, AssetCatalogTableQueryVariables>(\n    ASSET_CATALOG_TABLE_QUERY,\n    {\n      skip: !!groupSelector,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const groupQuery = useQuery<AssetCatalogGroupTableQuery, AssetCatalogGroupTableQueryVariables>(\n    ASSET_CATALOG_GROUP_TABLE_QUERY,\n    {\n      skip: !groupSelector,\n      variables: {group: groupSelector},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  return React.useMemo(() => {\n    if (groupSelector) {\n      const assetNodes = groupQuery.data?.assetNodes;\n      return {\n        query: groupQuery,\n        error: undefined,\n        assets: assetNodes?.map(definitionToAssetTableFragment),\n      };\n    }\n\n    const assetsOrError = assetsQuery.data?.assetsOrError;\n    return {\n      query: assetsQuery,\n      error: assetsOrError?.__typename === 'PythonError' ? assetsOrError : undefined,\n      assets: assetsOrError?.__typename === 'AssetConnection' ? assetsOrError.nodes : undefined,\n    };\n  }, [assetsQuery, groupQuery, groupSelector]);\n}\n\ninterface AssetCatalogTableProps {\n  prefixPath: string[];\n  setPrefixPath: (prefixPath: string[]) => void;\n  groupSelector?: AssetGroupSelector;\n}\n\nexport const AssetsCatalogTable: React.FC<AssetCatalogTableProps> = ({\n  prefixPath,\n  setPrefixPath,\n  groupSelector,\n}) => {\n  const [view, setView] = useAssetView();\n  const [search, setSearch] = useQueryPersistedState<string | undefined>({queryKey: 'q'});\n  const [searchGroups, setSearchGroups] = useQueryPersistedState<AssetGroupSelector[]>({\n    queryKey: 'g',\n    decode: (qs) => (qs.groups ? JSON.parse(qs.groups) : []),\n    encode: (groups) => ({groups: groups.length ? JSON.stringify(groups) : undefined}),\n  });\n\n  const searchPath = (search || '')\n    .replace(/(( ?> ?)|\\.|\\/)/g, '/')\n    .toLowerCase()\n    .trim();\n\n  const {assets, query, error} = useAllAssets(groupSelector);\n  const assetGroupOptions = useAssetGroupSelectorsForAssets(assets);\n  const pathMatches = useAssetSearch(searchPath, assets || []);\n\n  const filtered = React.useMemo(\n    () =>\n      pathMatches.filter(\n        (a) =>\n          !searchGroups.length || searchGroups.some((g) => isEqual(buildAssetGroupSelector(a), g)),\n      ),\n    [pathMatches, searchGroups],\n  );\n\n  const {displayPathForAsset, displayed} =\n    view === 'flat'\n      ? buildFlatProps(filtered, prefixPath)\n      : buildNamespaceProps(filtered, prefixPath);\n\n  const refreshState = useQueryRefreshAtInterval(query, FIFTEEN_SECONDS);\n\n  React.useEffect(() => {\n    if (view !== 'directory' && prefixPath.length) {\n      setView('directory');\n    }\n  }, [view, setView, prefixPath]);\n\n  if (error) {\n    return <PythonErrorInfo error={error} />;\n  }\n\n  if (!assets) {\n    return <LoadingSpinner purpose=\"page\" />;\n  }\n\n  if (!assets.length) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <AssetsEmptyState prefixPath={prefixPath} />\n      </Box>\n    );\n  }\n\n  return (\n    <AssetTable\n      view={view}\n      assets={displayed}\n      actionBarComponents={\n        <>\n          <ButtonGroup<AssetViewType>\n            activeItems={new Set([view])}\n            buttons={[\n              {id: 'flat', icon: 'view_list', tooltip: 'List view'},\n              {id: 'directory', icon: 'folder', tooltip: 'Folder view'},\n            ]}\n            onClick={(view) => {\n              setView(view);\n              if (view === 'flat' && prefixPath.length) {\n                setPrefixPath([]);\n              }\n            }}\n          />\n          <TextInput\n            value={search || ''}\n            style={{width: '30vw', minWidth: 150, maxWidth: 400}}\n            placeholder={\n              prefixPath.length\n                ? `Filter asset keys in ${prefixPath.join('/')}…`\n                : `Filter asset keys…`\n            }\n            onChange={(e: React.ChangeEvent<any>) => setSearch(e.target.value)}\n          />\n          {!groupSelector ? (\n            <AssetGroupSuggest\n              assetGroups={assetGroupOptions}\n              value={searchGroups}\n              onChange={setSearchGroups}\n            />\n          ) : undefined}\n        </>\n      }\n      refreshState={refreshState}\n      prefixPath={prefixPath || []}\n      searchPath={searchPath}\n      searchGroups={searchGroups}\n      displayPathForAsset={displayPathForAsset}\n      requery={(_) => [{query: ASSET_CATALOG_TABLE_QUERY}]}\n    />\n  );\n};\n\nexport const ASSET_CATALOG_TABLE_QUERY = gql`\n  query AssetCatalogTableQuery {\n    assetsOrError {\n      ... on AssetConnection {\n        nodes {\n          id\n          ...AssetTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${ASSET_TABLE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const ASSET_CATALOG_GROUP_TABLE_QUERY = gql`\n  query AssetCatalogGroupTableQuery($group: AssetGroupSelector) {\n    assetNodes(group: $group) {\n      id\n      ...AssetCatalogGroupTableNode\n    }\n  }\n\n  fragment AssetCatalogGroupTableNode on AssetNode {\n    id\n    assetKey {\n      path\n    }\n    ...AssetTableDefinitionFragment\n  }\n\n  ${ASSET_TABLE_DEFINITION_FRAGMENT}\n`;\n\n// When we load the AssetCatalogTable for a particular asset group, we retrieve `assetNodes`,\n// not `assets`. To narrow the scope of this difference we coerce the nodes to look like\n// AssetCatalogTableQuery results.\nfunction definitionToAssetTableFragment(definition: AssetCatalogGroupTableNodeFragment): Asset {\n  return {__typename: 'Asset', id: definition.id, key: definition.assetKey, definition};\n}\n\nfunction buildFlatProps(assets: Asset[], _: string[]) {\n  return {\n    displayed: assets,\n    displayPathForAsset: (asset: Asset) => asset.key.path,\n  };\n}\n\nfunction buildNamespaceProps(assets: Asset[], prefixPath: string[]) {\n  // Return all assets from the next PAGE_SIZE namespaces - the AssetTable component will later\n  // group them by namespace\n\n  const namespaceForAsset = (asset: Asset) => {\n    return asset.key.path.slice(prefixPath.length, prefixPath.length + 1);\n  };\n\n  // Only consider assets that start with the prefix path\n  const assetsWithPathPrefix = assets.filter((asset) =>\n    asset.key.path.join(',').startsWith(prefixPath.join(',')),\n  );\n\n  const namespaces = Array.from(\n    new Set(assetsWithPathPrefix.map((asset) => JSON.stringify(namespaceForAsset(asset)))),\n  )\n    .map((x) => JSON.parse(x))\n    .sort();\n\n  return {\n    displayPathForAsset: namespaceForAsset,\n    displayed: filterAssetsByNamespace(\n      assetsWithPathPrefix,\n      namespaces.map((ns) => [...prefixPath, ...ns]),\n    ),\n  };\n}\n\nconst filterAssetsByNamespace = (assets: Asset[], paths: string[][]) => {\n  return assets.filter((asset) =>\n    paths.some((path) => path.every((part, i) => part === asset.key.path[i])),\n  );\n};\n","import * as React from 'react';\n\nimport {tokenForAssetKey} from '../asset-graph/Utils';\n\nconst useSanitizedAssetSearch = (searchValue: string) => {\n  return React.useMemo(() => {\n    return (searchValue || '')\n      .replace(/(( ?> ?)|\\.|\\/)/g, '/')\n      .toLowerCase()\n      .trim();\n  }, [searchValue]);\n};\n\nexport const useAssetSearch = <A extends {key: {path: string[]}}>(\n  searchValue: string,\n  assets: A[],\n): A[] => {\n  const sanitizedSearch = useSanitizedAssetSearch(searchValue);\n  return React.useMemo(() => {\n    // If there is no search value, match everything.\n    if (!sanitizedSearch) {\n      return assets;\n    }\n    return assets.filter((a) => tokenForAssetKey(a.key).toLowerCase().includes(sanitizedSearch));\n  }, [assets, sanitizedSearch]);\n};\n\nexport const useAssetNodeSearch = <A extends {assetKey: {path: string[]}}>(\n  searchValue: string,\n  assetNodes: A[],\n): A[] => {\n  const sanitizedSearch = useSanitizedAssetSearch(searchValue);\n\n  return React.useMemo(() => {\n    // If there is no search value, match everything.\n    if (!sanitizedSearch) {\n      return assetNodes;\n    }\n    return assetNodes.filter((a) =>\n      tokenForAssetKey(a.assetKey).toLowerCase().includes(sanitizedSearch),\n    );\n  }, [assetNodes, sanitizedSearch]);\n};\n","import {\n  Box,\n  Colors,\n  Icon,\n  IconWrapper,\n  MiddleTruncate,\n  Spinner,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {\n  NO_RELOAD_PERMISSION_TEXT,\n  ReloadRepositoryLocationButton,\n} from './ReloadRepositoryLocationButton';\n\nexport const RepositoryLink: React.FC<{\n  repoAddress: RepoAddress;\n  showIcon?: boolean;\n  showRefresh?: boolean;\n}> = ({repoAddress, showIcon = false, showRefresh = true}) => {\n  const {location} = repoAddress;\n  const repoString = repoAddressAsHumanString(repoAddress);\n\n  return (\n    <Box flex={{display: 'inline-flex', direction: 'row', alignItems: 'center'}} title={repoString}>\n      {showIcon && <Icon name=\"folder\" style={{marginRight: 8}} color={Colors.Gray400} />}\n      <RepositoryName to={workspacePathFromAddress(repoAddress)} style={{flex: 1}}>\n        <MiddleTruncate text={repoString} />\n      </RepositoryName>\n      {showRefresh ? (\n        <ReloadRepositoryLocationButton\n          location={location}\n          ChildComponent={({codeLocation, tryReload, reloading, hasReloadPermission}) => {\n            const tooltipContent = () => {\n              if (!hasReloadPermission) {\n                return NO_RELOAD_PERMISSION_TEXT;\n              }\n\n              return reloading ? (\n                'Reloading…'\n              ) : (\n                <>\n                  Reload location <strong>{codeLocation}</strong>\n                </>\n              );\n            };\n\n            return (\n              <ReloadTooltip content={tooltipContent()}>\n                {reloading ? (\n                  <Spinner purpose=\"body-text\" />\n                ) : (\n                  <StyledButton disabled={!hasReloadPermission} onClick={tryReload}>\n                    <Icon\n                      name=\"refresh\"\n                      color={hasReloadPermission ? Colors.Gray400 : Colors.Gray300}\n                    />\n                  </StyledButton>\n                )}\n              </ReloadTooltip>\n            );\n          }}\n        />\n      ) : null}\n    </Box>\n  );\n};\n\nexport const RepositoryName = styled(Link)`\n  max-width: 280px;\n`;\n\nconst ReloadTooltip = styled(Tooltip)`\n  margin-left: 4px;\n\n  && {\n    display: block;\n  }\n`;\n\nconst StyledButton = styled.button`\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n  display: block;\n  padding: 0;\n  margin: 0;\n\n  :disabled {\n    cursor: default;\n  }\n\n  :focus:not(:focus-visible) {\n    outline: none;\n  }\n\n  & ${IconWrapper} {\n    display: block;\n    transition: color 100ms linear;\n  }\n\n  :hover ${IconWrapper} {\n    color: ${Colors.Blue500};\n  }\n`;\n","import {\n  Box,\n  ButtonLink,\n  Colors,\n  Tag,\n  Tooltip,\n  FontFamily,\n  MiddleTruncate,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {ScheduleSwitchFragment} from '../schedules/types/ScheduleSwitch.types';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {SensorSwitchFragment} from '../sensors/types/SensorSwitch.types';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {ScheduleAndSensorDialog} from './ScheduleAndSensorDialog';\n\nexport const ScheduleOrSensorTag: React.FC<{\n  schedules: ScheduleSwitchFragment[];\n  sensors: SensorSwitchFragment[];\n  repoAddress: RepoAddress;\n  showSwitch?: boolean;\n}> = ({schedules, sensors, repoAddress, showSwitch = true}) => {\n  const [open, setOpen] = React.useState(false);\n\n  const scheduleCount = schedules.length;\n  const sensorCount = sensors.length;\n\n  if (scheduleCount > 1 || sensorCount > 1 || (scheduleCount && sensorCount)) {\n    const buttonText =\n      scheduleCount && sensorCount\n        ? `${scheduleCount + sensorCount} schedules/sensors`\n        : scheduleCount\n        ? `${scheduleCount} schedules`\n        : `${sensorCount} sensors`;\n\n    const icon = scheduleCount > 1 ? 'schedule' : 'sensors';\n\n    return (\n      <>\n        <Tag icon={icon}>\n          <ButtonLink onClick={() => setOpen(true)} color={Colors.Link}>\n            {buttonText}\n          </ButtonLink>\n        </Tag>\n        <ScheduleAndSensorDialog\n          isOpen={open}\n          onClose={() => setOpen(false)}\n          repoAddress={repoAddress}\n          schedules={schedules}\n          sensors={sensors}\n          showSwitch={showSwitch}\n        />\n      </>\n    );\n  }\n\n  if (scheduleCount) {\n    return (\n      <MatchingSchedule\n        schedule={schedules[0]!}\n        repoAddress={repoAddress}\n        showSwitch={showSwitch}\n      />\n    );\n  }\n\n  if (sensorCount) {\n    return (\n      <MatchingSensor sensor={sensors[0]!} repoAddress={repoAddress} showSwitch={showSwitch} />\n    );\n  }\n\n  return null;\n};\n\nconst MatchingSchedule: React.FC<{\n  schedule: ScheduleSwitchFragment;\n  repoAddress: RepoAddress;\n  showSwitch: boolean;\n}> = ({schedule, repoAddress, showSwitch}) => {\n  const {cronSchedule, executionTimezone, scheduleState} = schedule;\n  const running = scheduleState.status === 'RUNNING';\n  const tag = (\n    <Tag intent={running ? 'primary' : 'none'} icon=\"schedule\">\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <Link\n          to={workspacePathFromAddress(repoAddress, `/schedules/${schedule.name}`)}\n          style={{overflow: 'hidden', textOverflow: 'ellipsis'}}\n        >\n          {humanCronString(cronSchedule, executionTimezone || 'UTC')}\n        </Link>\n        {showSwitch ? (\n          <ScheduleSwitch size=\"small\" repoAddress={repoAddress} schedule={schedule} />\n        ) : null}\n      </Box>\n    </Tag>\n  );\n\n  return schedule.cronSchedule ? (\n    <Tooltip\n      placement=\"top-start\"\n      content={\n        <Box flex={{direction: 'column', gap: 4}}>\n          <div>\n            Name: <strong>{schedule.name}</strong>\n          </div>\n          <div>\n            Cron:{' '}\n            <span style={{fontFamily: FontFamily.monospace, marginLeft: '4px'}}>\n              ({schedule.cronSchedule})\n            </span>\n          </div>\n          <div>\n            Timezone: <strong>{schedule.executionTimezone || 'UTC'}</strong>\n          </div>\n        </Box>\n      }\n    >\n      {tag}\n    </Tooltip>\n  ) : (\n    tag\n  );\n};\n\nconst MatchingSensor: React.FC<{\n  sensor: SensorSwitchFragment;\n  repoAddress: RepoAddress;\n  showSwitch: boolean;\n}> = ({sensor, repoAddress, showSwitch}) => {\n  const running = sensor.sensorState.status === 'RUNNING';\n  return (\n    <Tag intent={running ? 'primary' : 'none'} icon=\"sensors\">\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <Link\n          to={workspacePathFromAddress(repoAddress, `/sensors/${sensor.name}`)}\n          style={{maxWidth: 200, overflow: 'hidden'}}\n        >\n          <MiddleTruncate text={sensor.name} />\n        </Link>\n        {showSwitch ? (\n          <SensorSwitch size=\"small\" repoAddress={repoAddress} sensor={sensor} />\n        ) : null}\n      </Box>\n    </Tag>\n  );\n};\n","import {useQuery} from '@apollo/client';\nimport {CursorPaginationProps} from '@dagster-io/ui-components';\nimport {DocumentNode} from 'graphql';\nimport * as React from 'react';\n\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\n\ninterface CursorPaginationQueryVariables {\n  cursor?: string | null;\n  limit?: number | null;\n}\n\n/**\n * This is a React hook that makes it easier to build paginated list views based on a GraphQL\n * query. It is intended to be used in place of Apollo's `useQuery` and assumes that the query\n * takes at least `cursor` and `limit` variables. It manages those two variables internally,\n * and you can pass additional variables via the options.\n *\n * The current pagination \"cursor\" is saved to the URL query string, which allows the user to\n * navigate \"back\" in their browser history to move to previous pages.\n *\n * The returned paginationProps expose methods for moving to the next / previous page and are\n * used by <CursorPaginationControls /> to render the pagination buttons.\n */\nexport function useCursorPaginatedQuery<T, TVars extends CursorPaginationQueryVariables>(options: {\n  query: DocumentNode;\n  nextCursorForResult: (result: T) => string | undefined;\n  skip?: boolean;\n  variables: Omit<TVars, 'cursor' | 'limit'>;\n  pageSize: number;\n  getResultArray: (result: T | undefined) => any[];\n}) {\n  const [cursorStack, setCursorStack] = React.useState<string[]>(() => []);\n  const [cursor, setCursor] = useQueryPersistedState<string | undefined>({queryKey: 'cursor'});\n\n  const queryVars: any = {\n    ...options.variables,\n    cursor,\n    limit: options.pageSize + 1,\n  };\n\n  const queryResult = useQuery<T, TVars>(options.query, {\n    skip: options.skip,\n    variables: queryVars,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const resultArray = options.getResultArray(queryResult.data);\n  const paginationProps: CursorPaginationProps = {\n    hasPrevCursor: !!cursor,\n    hasNextCursor: resultArray.length === options.pageSize + 1,\n    popCursor: () => {\n      const nextStack = [...cursorStack];\n      setCursor(nextStack.pop());\n      setCursorStack(nextStack);\n    },\n    advanceCursor: () => {\n      if (cursor) {\n        setCursorStack((current) => [...current, cursor]);\n      }\n      const nextCursor = queryResult.data && options.nextCursorForResult(queryResult.data);\n      if (!nextCursor) {\n        return;\n      }\n      setCursor(nextCursor);\n    },\n    reset: () => {\n      setCursorStack([]);\n      setCursor(undefined);\n    },\n  };\n\n  return {queryResult, paginationProps};\n}\n","import {Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {AssetKeyInput} from '../graphql/types';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {\n  executionDisabledMessageForAssets,\n  useMaterializationAction,\n} from './LaunchAssetExecutionButton';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetTableDefinitionFragment} from './types/AssetTableFragment.types';\n\ninterface Props {\n  path: string[];\n  definition: AssetTableDefinitionFragment | null;\n  repoAddress: RepoAddress | null;\n  onWipe?: (assets: AssetKeyInput[]) => void;\n}\n\nexport const AssetActionMenu: React.FC<Props> = (props) => {\n  const {repoAddress, path, definition, onWipe} = props;\n  const {\n    permissions: {canWipeAssets},\n  } = usePermissionsForLocation(repoAddress?.location);\n\n  const {onClick, loading, launchpadElement} = useMaterializationAction();\n  const disabledMessage = definition\n    ? executionDisabledMessageForAssets([definition])\n    : 'Asset definition not found in a code location';\n\n  return (\n    <>\n      <Popover\n        position=\"bottom-right\"\n        content={\n          <Menu>\n            <Tooltip\n              content={disabledMessage || 'Shift+click to add configuration'}\n              placement=\"left\"\n              display=\"block\"\n              useDisabledButtonTooltipFix\n            >\n              <MenuItem\n                text=\"Materialize\"\n                icon={loading ? <Spinner purpose=\"body-text\" /> : 'materialization'}\n                disabled={!!disabledMessage || loading}\n                onClick={(e) => onClick([{path}], e)}\n              />\n            </Tooltip>\n            <MenuLink\n              text=\"Show in group\"\n              to={\n                repoAddress && definition?.groupName\n                  ? workspacePathFromAddress(repoAddress, `/asset-groups/${definition.groupName}`)\n                  : ''\n              }\n              disabled={!definition}\n              icon=\"asset_group\"\n            />\n            <MenuLink\n              text=\"View neighbors\"\n              to={assetDetailsPathForKey({path}, {view: 'lineage', lineageScope: 'neighbors'})}\n              disabled={!definition}\n              icon=\"graph_neighbors\"\n            />\n            <MenuLink\n              text=\"View upstream assets\"\n              to={assetDetailsPathForKey({path}, {view: 'lineage', lineageScope: 'upstream'})}\n              disabled={!definition}\n              icon=\"graph_upstream\"\n            />\n            <MenuLink\n              text=\"View downstream assets\"\n              to={assetDetailsPathForKey({path}, {view: 'lineage', lineageScope: 'downstream'})}\n              disabled={!definition}\n              icon=\"graph_downstream\"\n            />\n            <MenuItem\n              text=\"Wipe materializations\"\n              icon=\"delete\"\n              disabled={!onWipe || !canWipeAssets}\n              intent=\"danger\"\n              onClick={() => canWipeAssets && onWipe && onWipe([{path}])}\n            />\n          </Menu>\n        }\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n      {launchpadElement}\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Caption, Checkbox, Colors, Icon} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {buildAssetNodeStatusContent} from '../asset-graph/AssetNodeStatusContent';\nimport {AssetRunLink} from '../asset-graph/AssetRunLinking';\nimport {MISSING_LIVE_DATA, toGraphId, tokenForAssetKey} from '../asset-graph/Utils';\nimport {useLiveDataForAssetKeys} from '../asset-graph/useLiveDataForAssetKeys';\nimport {AssetActionMenu} from '../assets/AssetActionMenu';\nimport {AssetLink} from '../assets/AssetLink';\nimport {PartitionCountLabels, partitionCountString} from '../assets/AssetNodePartitionCounts';\nimport {StaleReasonsLabel} from '../assets/Stale';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {AssetTableDefinitionFragment} from '../assets/types/AssetTableFragment.types';\nimport {AssetViewType} from '../assets/useAssetView';\nimport {AssetComputeKindTag} from '../graph/OpTags';\nimport {AssetKeyInput} from '../graphql/types';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {testId} from '../testing/testId';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {RepoAddress} from './types';\nimport {\n  SingleNonSdaAssetQuery,\n  SingleNonSdaAssetQueryVariables,\n} from './types/VirtualizedAssetRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS = '1.3fr 1fr 80px';\nconst TEMPLATE_COLUMNS_FOR_CATALOG = '76px 1.3fr 1.3fr 1.3fr 80px';\n\ninterface AssetRowProps {\n  path: string[];\n  definition: AssetTableDefinitionFragment | null;\n\n  checked: boolean;\n  type: 'folder' | 'asset' | 'asset_non_sda';\n  view?: AssetViewType;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  showRepoColumn: boolean;\n  repoAddress: RepoAddress | null;\n  height: number;\n  start: number;\n  onWipe: (assets: AssetKeyInput[]) => void;\n}\n\nexport const VirtualizedAssetRow = (props: AssetRowProps) => {\n  const {\n    path,\n    definition,\n    type,\n    repoAddress,\n    start,\n    height,\n    checked,\n    onToggleChecked,\n    onWipe,\n    showCheckboxColumn = false,\n    showRepoColumn,\n    view = 'flat',\n  } = props;\n\n  const liveData = useLiveDataOrLatestMaterializationDebounced(path, type);\n  const linkUrl = assetDetailsPathForKey({path});\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  return (\n    <Row $height={height} $start={start} data-testid={testId(`row-${tokenForAssetKey({path})}`)}>\n      <RowGrid border=\"bottom\" $showRepoColumn={showRepoColumn}>\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Checkbox checked={checked} onChange={onChange} />\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <Box flex={{alignItems: 'center'}}>\n            <div style={{flex: 1, minWidth: 0}}>\n              <AssetLink\n                path={type === 'folder' || view === 'directory' ? path.slice(-1) : path}\n                url={linkUrl}\n                isGroup={type === 'folder'}\n                icon={type}\n                textStyle=\"middle-truncate\"\n              />\n            </div>\n            {definition && (\n              <AssetComputeKindTag\n                reduceColor\n                reduceText\n                definition={definition}\n                style={{position: 'relative'}}\n              />\n            )}\n          </Box>\n          <div\n            style={{\n              maxWidth: '100%',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n            }}\n          >\n            <Caption style={{color: Colors.Gray500, whiteSpace: 'nowrap'}}>\n              {definition?.description}\n            </Caption>\n          </div>\n        </RowCell>\n        {showRepoColumn ? (\n          <RowCell>\n            {repoAddress ? (\n              <Box\n                flex={{direction: 'column', gap: 4}}\n                style={{maxWidth: '100%', overflow: 'hidden'}}\n              >\n                <RepositoryLink repoAddress={repoAddress} showIcon showRefresh={false} />\n                {definition && definition.groupName ? (\n                  <Link\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/asset-groups/${definition.groupName}`,\n                    )}\n                  >\n                    <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                      <Icon color={Colors.Gray400} name=\"asset_group\" />\n                      {definition.groupName}\n                    </Box>\n                  </Link>\n                ) : null}\n              </Box>\n            ) : (\n              <span>{'\\u2013'}</span>\n            )}\n          </RowCell>\n        ) : null}\n        <RowCell>\n          {definition?.partitionDefinition ? (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n              <PartitionCountLabels partitionStats={liveData?.partitionStats} />\n              <Caption>{partitionCountString(liveData?.partitionStats?.numPartitions)}</Caption>\n            </Box>\n          ) : (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n              {definition ? (\n                <Box\n                  style={{whiteSpace: 'nowrap'}}\n                  flex={{direction: 'row', alignItems: 'center', gap: 8}}\n                >\n                  {\n                    buildAssetNodeStatusContent({\n                      assetKey: {path},\n                      definition,\n                      expanded: true,\n                      liveData,\n                    }).content\n                  }\n                </Box>\n              ) : liveData?.lastMaterialization ? (\n                <AssetRunLink\n                  runId={liveData.lastMaterialization.runId}\n                  event={{\n                    stepKey: liveData.stepKey,\n                    timestamp: liveData.lastMaterialization.timestamp,\n                  }}\n                >\n                  <TimestampDisplay\n                    timestamp={Number(liveData.lastMaterialization.timestamp) / 1000}\n                    timeFormat={{showSeconds: false, showTimezone: false}}\n                  />\n                </AssetRunLink>\n              ) : (\n                <div style={{color: Colors.Gray500}}>\n                  {!liveData && type !== 'folder' ? 'Loading' : '\\u2013'}\n                </div>\n              )}\n              {liveData && (\n                <StaleReasonsLabel assetKey={{path}} liveData={liveData} include=\"all\" />\n              )}\n            </Box>\n          )}\n        </RowCell>\n        <RowCell>\n          {type !== 'folder' ? (\n            <AssetActionMenu\n              path={path}\n              definition={definition}\n              repoAddress={repoAddress}\n              onWipe={onWipe}\n            />\n          ) : null}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedAssetCatalogHeader: React.FC<{\n  headerCheckbox: React.ReactNode;\n  view: AssetViewType;\n}> = ({headerCheckbox, view}) => {\n  return (\n    <Box\n      background={Colors.White}\n      border=\"top-and-bottom\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS_FOR_CATALOG,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n        position: 'sticky',\n        top: 0,\n        zIndex: 1,\n      }}\n    >\n      <HeaderCell>{headerCheckbox}</HeaderCell>\n      <HeaderCell>{view === 'flat' ? 'Asset name' : 'Asset key prefix'}</HeaderCell>\n      <HeaderCell>Code location / Asset group</HeaderCell>\n      <HeaderCell>Status</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </Box>\n  );\n};\n\nexport const VirtualizedAssetHeader: React.FC<{\n  nameLabel: React.ReactNode;\n}> = ({nameLabel}) => {\n  return (\n    <Box\n      border=\"top-and-bottom\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell>{nameLabel}</HeaderCell>\n      <HeaderCell>Status</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showRepoColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showRepoColumn}) =>\n    $showRepoColumn ? TEMPLATE_COLUMNS_FOR_CATALOG : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst LIVE_QUERY_DELAY = 250;\n\n/**\n * This hook maps through to `useLiveDataForAssetKeys` for the `asset` case and a per-row\n * query for the latest materialization for the `asset_non_sda` case.\n *\n * It uses internal state and `skip` to implement a debounce that prevents a ton of queries\n * as the user scans past rows. (The best way to skip the useLiveDataForAssetKeys work is\n * to pass it an empty array of asset keys.)\n */\nexport function useLiveDataOrLatestMaterializationDebounced(\n  path: string[],\n  type: 'folder' | 'asset' | 'asset_non_sda',\n) {\n  const [debouncedKeys, setDebouncedKeys] = React.useState<AssetKeyInput[]>([]);\n  const debouncedKey = (debouncedKeys[0] || '') as AssetKeyInput;\n\n  const {liveDataByNode} = useLiveDataForAssetKeys(type === 'asset' ? debouncedKeys : []);\n\n  const {data: nonSDAData} = useQuery<SingleNonSdaAssetQuery, SingleNonSdaAssetQueryVariables>(\n    SINGLE_NON_SDA_ASSET_QUERY,\n    {\n      skip: type !== 'asset_non_sda' || !debouncedKey,\n      variables: {input: debouncedKey},\n    },\n  );\n\n  React.useEffect(() => {\n    if (type === 'folder') {\n      return;\n    }\n    const timer = setTimeout(() => {\n      setDebouncedKeys(path ? [{path}] : []);\n    }, LIVE_QUERY_DELAY);\n    return () => clearTimeout(timer);\n  }, [type, path]);\n\n  if (type === 'asset') {\n    return liveDataByNode[toGraphId({path})]!;\n  }\n\n  if (type === 'asset_non_sda') {\n    return {\n      ...MISSING_LIVE_DATA,\n      lastMaterialization:\n        nonSDAData?.assetOrError.__typename === 'Asset' &&\n        nonSDAData.assetOrError.assetMaterializations[0]\n          ? nonSDAData.assetOrError.assetMaterializations[0]\n          : null,\n    };\n  }\n\n  return null;\n}\n\nexport const SINGLE_NON_SDA_ASSET_QUERY = gql`\n  query SingleNonSDAAssetQuery($input: AssetKeyInput!) {\n    assetOrError(assetKey: $input) {\n      ... on Asset {\n        id\n        assetMaterializations(limit: 1) {\n          runId\n          timestamp\n        }\n      }\n    }\n  }\n`;\n"],"names":["useAssetGroupSelectorsForAssets","assets","React","uniqBy","map","buildAssetGroupSelector","filter","a","JSON","stringify","sort","b","groupName","localeCompare","FAKE_SELECTED_ITEM","repositoryLocationName","repositoryName","AssetGroupSuggest","param","assetGroups","value","onChange","repoKey","g","concat","repoKey1","repoContextNeeded","every","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Suggest","selectedItem","length","items","menuWidth","inputProps","style","width","placeholder","rightElement","ClearButton","onClick","marginTop","marginRight","Icon","name","undefined","inputValueRenderer","itemPredicate","query","partition","toLowerCase","includes","itemsEqual","isEqual","itemRenderer","assetGroup","props","MenuItem","active","modifiers","handleClick","text","jsxs","Box","flex","direction","gap","alignItems","margin","left","maxWidth","Checkbox","checked","some","size","readOnly","grow","shrink","overflow","div","span","opacity","paddingLeft","buildRepoPathForHuman","noResults","disabled","closeOnSelect","resetOnQuery","onItemSelect","item","nextValue","push","definition","repository","location","AssetLink","path","icon","url","isGroup","textStyle","linkUrl","assetDetailsPathForKey","assetPath","reduce","accum","elem","ii","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_3__","_","join","display","right","top","color","Colors","Gray400","Link","to","_props_textStyle","wordBreak","MiddleTruncate","ASSET_TABLE_DEFINITION_FRAGMENT","gql","ASSET_TABLE_FRAGMENT","VirtualizedAssetTable","headerCheckbox","prefixPath","groups","checkedDisplayKeys","onToggleFactory","onWipe","showRepoColumn","view","_props_view","parentRef","count","Object","keys","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","getVirtualItems","rows","entries","displayKey","_to_consumable_array","parse","isFolder","key","type","asset","jsx_runtime","Container","ref","VirtualizedAssetCatalogHeader","Inner","$totalHeight","index","start","row","wipeableAssets","VirtualizedAssetRow","repoAddress","buildRepoAddress","showCheckboxColumn","height","has","onToggleChecked","AssetWipeDialog","assetKeys","isOpen","onClose","onComplete","requery","requestWipe","useMutation","ASSET_WIPE_MUTATION","variables","refetchQueries","wipe","_async_to_generator","_state","sent","Dialog","title","DialogBody","Group","spacing","ul","assetKey","displayNameForAssetKey","li","marginBottom","strong","DialogFooter","topBorder","Button","intent","PYTHON_ERROR_FRAGMENT","AssetTable","actionBarComponents","refreshState","displayPathForAsset","searchPath","searchGroups","toWipe","setToWipe","groupedByDisplayKey","groupBy","displayKeys","useSelectionReducer","checkedIds","onToggleAll","checkedAssets","forEach","Fragment","background","White","padding","vertical","position","zIndex","QueryRefreshCountdown","c","Tooltip","content","data-testid","testId","toLocaleString","LaunchAssetExecutionButton","scope","selected","_object_spread_props","_object_spread","MoreActionsDropdown","clearSelection","NonIdealState","description","indeterminate","e","target","HTMLInputElement","showBulkWipeDialog","setShowBulkWipeDialog","useUnscopedPermissions","permissions","canWipeAssets","Popover","Menu","Gray600","Red500","AssetsEmptyState","p","code","href","validateSavedAssetView","storedValue","AssetsCatalogTable","namespaceForAsset","assetsWithPathPrefix","namespaces","assetsQuery","groupQuery","setPrefixPath","groupSelector","useAssetView","useStateWithStorage","setView","useQueryPersistedState","queryKey","search","setSearch","decode","qs","encode","setSearchGroups","replace","trim","useAllAssets","useQuery","ASSET_CATALOG_TABLE_QUERY","skip","notifyOnNetworkStatusChange","ASSET_CATALOG_GROUP_TABLE_QUERY","group","assetNodes","data","error","definitionToAssetTableFragment","assetsOrError","__typename","nodes","assetGroupOptions","pathMatches","useAssetSearch","filtered","displayed","slice","startsWith","Array","from","Set","x","filterAssetsByNamespace","ns","useQueryRefreshAtInterval","FIFTEEN_SECONDS","PythonErrorInfo","ButtonGroup","activeItems","buttons","id","tooltip","TextInput","minWidth","LoadingSpinner","purpose","paths","part","i","useSanitizedAssetSearch","searchValue","sanitizedSearch","tokenForAssetKey","useAssetNodeSearch","RepositoryLink","showIcon","_param_showRefresh","showRefresh","repoString","repoAddressAsHumanString","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","_param_showIcon","RepositoryName","workspacePathFromAddress","ReloadRepositoryLocationButton","ChildComponent","codeLocation","tryReload","reloading","hasReloadPermission","ReloadTooltip","NO_RELOAD_PERMISSION_TEXT","Spinner","StyledButton","Gray300","styled","button","withConfig","IconWrapper","Blue500","ScheduleOrSensorTag","schedules","sensors","showSwitch","_param_showSwitch","open","setOpen","scheduleCount","sensorCount","Tag","ButtonLink","ScheduleAndSensorDialog","MatchingSchedule","schedule","MatchingSensor","sensor","cronSchedule","executionTimezone","running","scheduleState","status","tag","textOverflow","humanCronString","ScheduleSwitch","placement","fontFamily","FontFamily","monospace","marginLeft","sensorState","SensorSwitch","useCursorPaginatedQuery","options","cursorStack","setCursorStack","cursor","setCursor","queryVars","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_3__","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_4__","limit","pageSize","queryResult","resultArray","getResultArray","paginationProps","hasPrevCursor","hasNextCursor","popCursor","nextStack","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_6__","pop","advanceCursor","nextCursor","nextCursorForResult","reset","AssetActionMenu","usePermissionsForLocation","useMaterializationAction","loading","launchpadElement","disabledMessage","executionDisabledMessageForAssets","useDisabledButtonTooltipFix","MenuLink","lineageScope","TEMPLATE_COLUMNS","TEMPLATE_COLUMNS_FOR_CATALOG","debouncedKeys","setDebouncedKeys","debouncedKey","liveDataByNode","liveData","useLiveDataForAssetKeys","SINGLE_NON_SDA_ASSET_QUERY","input","timer","setTimeout","clearTimeout","toGraphId","MISSING_LIVE_DATA","lastMaterialization","nonSDAData","assetOrError","assetMaterializations","Row","$height","$start","RowGrid","border","$showRepoColumn","_props_showCheckboxColumn","RowCell","shiftKey","nativeEvent","MouseEvent","getModifierState","AssetComputeKindTag","reduceColor","reduceText","Caption","Gray500","whiteSpace","partitionDefinition","PartitionCountLabels","partitionStats","partitionCountString","numPartitions","buildAssetNodeStatusContent","expanded","AssetRunLink","runId","event","stepKey","timestamp","TimestampDisplay","Number","timeFormat","showSeconds","showTimezone","StaleReasonsLabel","include","gridTemplateColumns","fontSize","HeaderCell","VirtualizedAssetHeader","nameLabel"],"sourceRoot":""}